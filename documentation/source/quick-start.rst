
.. _quickstart:

Canu Quick Start
================

Canu specializes in assembling PacBio or Oxford Nanopre sequences.  Canu will correct the reads, then trim suspicious regions (such as remaining SMRTbell adapter), then
assemble the corrected and cleaned reads into unitigs.

Brief Introduction
-------------------
Canu has been designed to auto-detect your resources and scale itself to fit. Two parameters let you restrict the resources used.

::

 maxMemory=XX
 maxThreads=XX

Memory is specified in gigabytes. On a single machine, it will restrict Canu to at most this limit, on the grid, no single job will try to use more than the specified resources.

The input sequences can be FASTA or FASTQ format, uncompressed, or compressed with gz, bz2 or xz.

Running on the grid
~~~~~~~~~~~~~~~~~~~~~~
Canu is designed to run on grid environments (LSF/PBS/Torque/Slrum/SGE are supported). Currently, Canu will submit itself to the default queue with default time options. You can overwrite this behavior by providing any specific parameters you want to be used for submission as an option. Users should also specify a job name to use on the grid:

::

 gridOptionsJobName=myassembly
 "gridOptions=--partition quick --time 2:00"

Assembling PacBio data
----------------------

Pacific Biosciences released P6-C4 chemistry reads.  You can download them
`directly <https://s3.amazonaws.com/files.pacb.com/datasets/secondary-analysis/e-coli-k12-P6C4/p6c4_ecoli_RSII_DDR2_with_15kb_cut_E01_1.tar.gz>`_
(7 GB) or from the
`original page <https://github.com/PacificBiosciences/DevNet/wiki/E.-coli-Bacterial-Assembly>`_.
You must have the Pac Bio SMRTpipe software installed to extract the reads as FASTQ.

We made a 25X subset FASTQ available
`here <http://gembox.cbcb.umd.edu/mhap/raw/ecoli_p6_25x.filtered.fastq>`_

or use the following curl command:

::

 curl -L -o p6.25x.fastq http://gembox.cbcb.umd.edu/mhap/raw/ecoli_p6_25x.filtered.fastq
 
Correct, Trim and Assemble
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, canu will correct the reads, then trim the reads, then assemble the reads to unitigs.  

::

 canu \
  -p ecoli -d ecoli-auto \
  genomeSize=4.8m \
  -pacbio-raw p6.25x.fastq

This will use the prefix 'ecoli' to name files, compute the correction task in directory 'ecoli-auto/correction', the trimming task in directory 'ecoli-auto/trimming', and the unitig construction stage in 'ecoli-auto' itself.
Output files are described in the next section.

Find the Output
~~~~~~~~~~~~~~~~~~~~~~

The canu progress chatter records statistics such as an input read histogram, corrected read histogram, and overlap types. Outputs from the assembly tasks are in:

ecoli*/ecoli.layout
   The layout provides information on where each read ended up in the final assembly, including contig and positions. It also includes the consensus sequence for each contig.
   
ecoli*/ecoli.gfa
   The `GFA <http://lh3.github.io/2014/07/19/a-proposal-of-the-grapical-fragment-assembly-format/>`_ is the assembly graph generated by Canu. Currently this includes the contigs, associated bubbles, and any overlaps which were not used by the assembly.
   
The fasta output is split into three types:

ecoli*/asm.contigs.fasta
   Everything which could be assembled and is part of the primary assembly, including both unique and repetitive elements.  Each contig has several flags included on the fasta def line::

   >tig######## len=<integer> reads=<integer> covStat=<float> gappedBases=<yes|no> class=<contig|bubble|unassm> suggestRepeat=<yes|no> suggestCircular=<yes|no>

   len
      Length of the sequence, in bp.

   reads
      Number of reads used to form the contig.

   covStat
      The log of the ratio of the contig being unique versus being two-copy, based on the read arrival rate.  Positive values indicate more likely to be unique, while negative values indicate more likely to be repetitive.  See `Footnote 24 <http://science.sciencemag.org/content/287/5461/2196.full#ref-24>`_ in `Myers et al., A Whole-Genome Assembly of Drosophila <http://science.sciencemag.org/content/287/5461/2196.full>`_.

   gappedBases
      If yes, the sequence includes all gaps in the multialignment.

   class
      Type of sequence.  Unassembled sequences are primarily low-coverage sequences spanned by a single read.

   suggestRepeat
      If yes, sequence was detected as a repeat based on graph topology or read overlaps to other sequences.

   suggestCircular
      If yes, sequence is likely circular.  Not implemented.

ecoli*/asm.bubbles.fasta
   alternate paths in the graph which could not be merged into the primary assembly.

ecoli*/asm.unassembled.fasta
   reads which could not be incorporated into the primary or bubble assemblies.


Correct, Trim and Assemble, Manually
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sometimes, however, it makes sense to do the three top-level tasks by hand.  This would allow trying
multiple unitig construction parameters on the same set of corrected and trimmed reads.

First, correct the raw reads::

 canu -correct \
   -p ecoli -d ecoli \
   genomeSize=4.8m \
   -pacbio-raw  p6.25x.fastq

Then, trim the output of the correction::

 canu -trim \
   -p ecoli -d ecoli \
   genomeSize=4.8m \
   -pacbio-corrected ecoli/correction/ecoli.correctedReads.fastq

And finally, assemble the output of trimming, twice::

 canu -assemble \
   -p ecoli -d ecoli-erate-0.013 \
   genomeSize=4.8m \
   errorRate=0.013 \
   -pacbio-corrected ecoli/trimming/ecoli.trimmedReads.fastq

 canu -assemble \
   -p ecoli -d ecoli-erate-0.025 \
   genomeSize=4.8m \
   errorRate=0.025 \
   -pacbio-corrected ecoli/trimming/ecoli.trimmedReads.fastq

The directory layout for correction and trimming is exactly the same as when we ran all tasks in the same command.
Each unitig construction task needs its own private work space, and in there the 'correction' and 'trimming' directories are empty. The error rate always specifies the error in the corrected reads which is typically <1% for PacBio data and <2% for Nanopore data (<1% on newest chemistries).

Assembling Oxford Nanopore data
--------------------------------
A set of E. coli runs were released by the Loman lab.  You can download one
`directly <http://nanopore.s3.climb.ac.uk/MAP006-PCR-1_2D_pass.fasta>`_
or any of them from the
`original page <http://lab.loman.net/2015/09/24/first-sqk-map-006-experiment/>`_.

or use the following curl command:

::

 curl -L -o oxford.fasta http://nanopore.s3.climb.ac.uk/MAP006-PCR-1_2D_pass.fasta

Canu assembles any of the four available datasets into a single contig but we picked one dataset to use in this tutorial. Then, assemble the data as before::

 canu \
  -p ecoli -d ecoli-oxford \
  genomeSize=4.8m \
  -nanopore-raw oxford.fasta

The assembled identity is >99% before polishing.

Assembling With Multiple Technologies/Files 
-------------------------------------------

Canu takes an arbitrary number of input files/formats. We made a mixed dataset of about 10X of a PacBio P6 and 10X of an Oxford Nanopore run available `here <http://gembox.cbcb.umd.edu/mhap/raw/ecoliP6Oxford.tar.gz>`_

or use the following curl command:

::

 curl -L -o mix.tar.gz http://gembox.cbcb.umd.edu/mhap/raw/ecoliP6Oxford.tar.gz
 tar xvzf mix.tar.gz
 
Now you can assemble all the data::

 canu \
  -p ecoli -d ecoli-mix \
  genomeSize=4.8m \
  -pacbio-raw pacbio*fastq.gz \
  -nanopore-raw oxford.fasta.gz

.. _quick_low:

Assembling Low Coverage Datasets
----------------------------------
When you have 30X or less coverage, it helps to adjust the Canu assembly parameters. Typically, assembly 20X of single-molecule data outperforms hybrid methods with higher coverage. You can download a 20X subset of `S. cerevisae <http://gembox.cbcb.umd.edu/mhap/raw/yeast_filtered.20x.fastq.gz>`_
 
or use the following curl command:

::

 curl -L -o yeast.20x.fastq.gz http://gembox.cbcb.umd.edu/mhap/raw/yeast_filtered.20x.fastq.gz

and run the assembler adding sensitive parameters (**corMinCoverage=0 errorRate=0.035**)::

 canu \
  -p asm -d yeast \
  genomeSize=12.1m \
  corMinCoverage=0 errorRate=0.035 \
  -pacbio-raw yeast.20x.fastq.gz
  

After the run completes, we can check the assembly statistics::

 tgStoreDump -sizes -s 12100000 -T yeast/unitigging/asm.tigStore 2 -G yeast/unitigging/asm.gkpStore

::

   lenSuggestRepeat sum     173426 (genomeSize 12100000)
   lenSuggestRepeat num         15
   lenSuggestRepeat ave      11561
   lenUnassembled ng10       13545 bp   lg10      78   sum    1222796 bp
   lenUnassembled ng20       11336 bp   lg20     176   sum    2430408 bp
   lenUnassembled ng30       10036 bp   lg30     289   sum    3637779 bp
   lenUnassembled ng40        9152 bp   lg40     415   sum    4843129 bp
   lenUnassembled ng50        8255 bp   lg50     555   sum    6057762 bp
   lenUnassembled ng60        7394 bp   lg60     710   sum    7262996 bp
   lenUnassembled ng70        6562 bp   lg70     884   sum    8472421 bp
   lenUnassembled ng80        5829 bp   lg80    1080   sum    9682480 bp
   lenUnassembled ng90        5168 bp   lg90    1301   sum   10893017 bp
   lenUnassembled ng100       4431 bp   lg100   1554   sum   12103066 bp
   lenUnassembled ng110       3731 bp   lg110   1850   sum   13311653 bp
   lenUnassembled ng120       2961 bp   lg120   2213   sum   14522021 bp
   lenUnassembled ng130       2086 bp   lg130   2693   sum   15731230 bp
  lenUnassembled sum   16861939 (genomeSize 12100000)
   lenUnassembled num       3442
   lenUnassembled ave       4898
   lenContig ng10      770259 bp   lg10       2   sum    1565899 bp
   lenContig ng20      710332 bp   lg20       4   sum    3000381 bp
   lenContig ng30      665395 bp   lg30       5   sum    3665776 bp
   lenContig ng40      610651 bp   lg40       7   sum    4890687 bp
   lenContig ng50      553073 bp   lg50      10   sum    6577239 bp
   lenContig ng60      390370 bp   lg60      12   sum    7413097 bp
   lenContig ng70      237134 bp   lg70      16   sum    8526341 bp
   lenContig ng80      142632 bp   lg80      23   sum    9773802 bp
   lenContig ng90       94308 bp   lg90      33   sum   10931633 bp
   lenContig sum   12045366 (genomeSize 12100000)
   lenContig num         57
   lenContig ave     211322

Consensus Accuracy
-------------------
While Canu corrects sequences and has 99% identity or greater with PacBio or Nanopore sequences, for the best accuracy we recommend polishing with a sequence-specific tool. We recommend `Quiver <http://github.com/PacificBiosciences/GenomicConsensus>`_ for PacBio and `Nanopolish <http://github.com/jts/nanopolish>`_ for Oxford Nanpore data.

If you have Illumina sequences available, `Pilon <http://www.broadinstitute.org/software/pilon/>`_ can also be used to polish either PacBio or Oxford Nanopore assemblies.

Changes
-------------------

- Rewriten bogart algorith, automatically selects error rate and has improved repeat breaking
- Drop seed length when running MHAP, compute all-vs-all overlaps and select best subest based on overlap coverage
 Fix various pipeline bugs

Known Issues
-------------------

 LSF support has limited testing
- Large memory usage while unitig consensus calling on unitigs over 100MB in size (140Mb contig uses approximate 75GB).
- Distributed file systems (such as GPFS) causes issues with memory mapped files, slowing down parts of Canu, including meryl (0-mercounts), falcon-sense (2-correction), and red (unitigging/3-*).
