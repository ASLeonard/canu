
.. _quickstart:

Canu Quick Start
================

Canu specializes in assembling PacBio or Oxford Nanopre sequences.  Canu will correct the reads, then trim suspicious regions (such as remaining SMRTbell adapter), then
assemble the corrected and cleaned reads into unitigs.

Brief Introduction
-------------------
Canu has been designed to auto-detect your resources and scale itself to fit. Two parameters let you restrict the resources used.

::

 maxMemory=XX
 maxThreads=XX

Memory is specified in gigabytes. On a single machine, it will restrict Canu to at most this limit, on the grid, no single job will try to use more than the specified resources.

The input sequences can be FASTA or FASTQ format, uncompressed, or compressed with gz, bz2 or xz.

Running on the grid
~~~~~~~~~~~~~~~~~~~~~~
Canu is designed to run on grid environments (LSF/PBS/Torque/Slrum/SGE are supported). Currently, Canu will submit itself to the default queue with default time options. You can overwrite this behavior by providing any specific parameters you want to be used for submission as an option. Users should also specify a job name to use on the grid:

::

 gridOptionsJobName=myassembly
 "gridOptions=--partition quick --time 2:00"

Assembling PacBio data
----------------------

Pacific Biosciences released P6-C4 chemistry reads.  You can download them
`directly <https://s3.amazonaws.com/files.pacb.com/datasets/secondary-analysis/e-coli-k12-P6C4/p6c4_ecoli_RSII_DDR2_with_15kb_cut_E01_1.tar.gz>`_
(7 GB) or from the
`original page <https://github.com/PacificBiosciences/DevNet/wiki/E.-coli-Bacterial-Assembly>`_.
You must have the Pac Bio SMRTpipe software installed to extract the reads as FASTQ.

We made a 25X subset FASTQ available
`here <http://gembox.cbcb.umd.edu/mhap/raw/ecoli_p6_25x.filtered.fastq>`_

or use the following curl command:

::

 curl -L -o p6.25x.fastq http://gembox.cbcb.umd.edu/mhap/raw/ecoli_p6_25x.filtered.fastq
 
Correct, Trim and Assemble
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By default, canu will correct the reads, then trim the reads, then assemble the reads to unitigs.  

::

 canu \
  -p ecoli -d ecoli-auto \
  genomeSize=4.8m \
  -pacbio-raw p6.25x.fastq

This will use the prefix 'ecoli' to name files, compute the correction task in directory 'ecoli-auto/correction', the trimming task in directory 'ecoli-auto/trimming', and the unitig construction stage in 'ecoli-auto' itself.
Output files are described in the next section.

Find the Output
~~~~~~~~~~~~~~~~~~~~~~

The canu progress chatter records statistics such as an input read histogram, corrected read histogram, and overlap types. Outputs from the assembly tasks are in:

ecoli*/ecoli.layout
   The layout provides information on where each read ended up in the final assembly, including contig and positions. It also includes the consensus sequence for each contig.
   
ecoli*/ecoli.gfa
   The `GFA <http://lh3.github.io/2014/07/19/a-proposal-of-the-grapical-fragment-assembly-format/>`_ is the assembly graph generated by Canu. Currently this includes the contigs, associated bubbles, and any overlaps which were not used by the assembly.
   
The fasta output is split into three types:

ecoli*/asm.contigs.fasta
   everything which could be assembled and is part of the primary assembly. This includes both unique and repetitive elements. Each contig has several flags included on the fasta def line. These include:
===============  ======  ==========
tag              values  definition
===============  ======  ==========
len              int     length in bp
reads            int     number of sequences comprising the contig
suggestRepeat    yes/no  whether the contig is a repetitive element or unique
suggestCircular  yes/no  currently unused 
===============  ======  ==========

ecoli*/asm.bubbles.fasta
   alternate paths in the graph which could not be merged into the primary assembly.

ecoli*/asm.unassembled.fasta
   reads which could not be incorporated into the primary or bubble assemblies.


Correct, Trim and Assemble, Manually
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sometimes, however, it makes sense to do the three top-level tasks by hand.  This would allow trying
multiple unitig construction parameters on the same set of corrected and trimmed reads.

First, correct the raw reads::

 canu -correct \
   -p ecoli -d ecoli \
   genomeSize=4.8m \
   -pacbio-raw  p6.25x.fastq

Then, trim the output of the correction::

 canu -trim \
   -p ecoli -d ecoli \
   genomeSize=4.8m \
   -pacbio-corrected ecoli/correction/ecoli.correctedReads.fastq

And finally, assemble the output of trimming, twice::

 canu -assemble \
   -p ecoli -d ecoli-erate-0.025 \
   genomeSize=4.8m \
   errorRate=0.025 \
   -pacbio-corrected ecoli/trimming/ecoli.trimmedReads.fastq

 canu -assemble \
   -p ecoli -d ecoli-erate-0.035 \
   genomeSize=4.8m \
   errorRate=0.035 \
   -pacbio-corrected ecoli/trimming/ecoli.trimmedReads.fastq

The directory layout for correction and trimming is exactly the same as when we ran all tasks in the same command.
Each unitig construction task needs its own private work space, and in there the 'correction' and 'trimming' directories are empty.

Assembling Oxford Nanopore data
--------------------------------
A set of E. coli runs were released by the Loman lab.  You can download one
`directly <http://nanopore.s3.climb.ac.uk/MAP006-PCR-1_2D_pass.fasta>`_
or any of them from the
`original page <http://lab.loman.net/2015/09/24/first-sqk-map-006-experiment/>`_.

or use the following curl command:

::

 curl -L -o oxford.fasta http://nanopore.s3.climb.ac.uk/MAP006-PCR-1_2D_pass.fasta

Canu assembles any of the four available datasets into a single contig but we picked one dataset to use in this tutorial. Then, assemble the data as before::

 canu \
  -p ecoli -d ecoli-oxford \
  genomeSize=4.8m \
  -nanopore-raw oxford.fasta

The assembled identity is >99% before polishing.

Assembling With Multiple Technologies/Files 
-------------------------------------------

Canu takes an arbitrary number of input files/formats. We made a mixed dataset of about 10X of a PacBio P6 and 10X of an Oxford Nanopore run available `here <http://gembox.cbcb.umd.edu/mhap/raw/ecoliP6Oxford.tar.gz>`_

or use the following curl command:

::

 curl -L -o mix.tar.gz http://gembox.cbcb.umd.edu/mhap/raw/ecoliP6Oxford.tar.gz
 tar xvzf mix.tar.gz
 
Now you can assemble all the data::

 canu \
  -p ecoli -d ecoli-mix \
  genomeSize=4.8m \
  -pacbio-raw pacbio*fastq.gz \
  -nanopore-raw oxford.fasta.gz

.. _quick_low:

Assembling Low Coverage Datasets
----------------------------------
When you have 30X or less coverage, it helps to adjust the Canu assembly parameters. You can download a 20X subset of `S. cerevisae <http://gembox.cbcb.umd.edu/mhap/raw/yeast_filtered.20x.fastq.gz>`_
 
or use the following curl command:

::

 curl -L -o yeast.20x.fastq.gz http://gembox.cbcb.umd.edu/mhap/raw/yeast_filtered.20x.fastq.gz

and run the assembler adding sensitive parameters (**corMhapSensitivity=high corMinCoverage=2 errorRate=0.035 minOverlapLength=499 corMaxEvidenceErate=0.3**)::

 canu \
  -p asm -d yeast \
  genomeSize=12.1m \
  corMhapSensitivity=high corMinCoverage=2 errorRate=0.035 minOverlapLength=499 corMaxEvidenceErate=0.3 \
  -pacbio-raw yeast.20x.fastq.gz
  

After the run completes, we can check the assembly statistics::

 tgStoreDump -sizes -s 12100000 -T yeast/unitigging/asm.tigStore 2 -G yeast/unitigging/asm.gkpStore

::

  lenSuggestRepeat sum     829257 (genomeSize 12100000)
  lenSuggestRepeat num        105
  lenSuggestRepeat ave       7897
  lenUnassembled ng10       12472 bp   lg10      75   sum    1217659 bp
  lenUnassembled ng20        8623 bp   lg20     192   sum    2420234 bp
  lenUnassembled ng30        5949 bp   lg30     359   sum    3632595 bp
  lenUnassembled ng40        2851 bp   lg40     640   sum    4842075 bp
  lenUnassembled sum    5325150 (genomeSize 12100000)
  lenUnassembled num        903
  lenUnassembled ave       5897
  lenContig ng10      719035 bp   lg10       2   sum    1502223 bp
  lenContig ng20      646872 bp   lg20       4   sum    2817020 bp
  lenContig ng30      565419 bp   lg30       6   sum    3949850 bp
  lenContig ng40      485518 bp   lg40       8   sum    4989743 bp
  lenContig ng50      329252 bp   lg50      11   sum    6245693 bp
  lenContig ng60      257910 bp   lg60      15   sum    7358747 bp
  lenContig ng70      196655 bp   lg70      20   sum    8473224 bp
  lenContig ng80      119852 bp   lg80      29   sum    9776539 bp
  lenContig ng90       85266 bp   lg90      40   sum   10892166 bp
  lenContig sum   11972093 (genomeSize 12100000)
  lenContig num         66
  lenContig ave     181395

Consensus Accuracy
-------------------
While Canu corrects sequences and has 99% identity or greater with PacBio or Nanopore sequences, for the best accuracy we recommend polishing with a sequence-specific tool. We recommend `Quiver <http://github.com/PacificBiosciences/GenomicConsensus/blob/master/doc/HowToQuiver.rst>`_ for PacBio and `Nanopolish <http://github.com/jts/nanopolish>`_ for Oxford Nanpore data.

If you have Illumina sequences available, `Pilon <http://www.broadinstitute.org/software/pilon/>`_ can also be used to polish either PacBio or Oxford Nanopore assemblies.

Changes
-------------------

- Support for reads up to 2Mbp in size (up from 130Kbp).
- Incorporate MHAP 2.0 which is 5X faster than previous version and has higher specificity
- Add GFA output
- Improve diploid-aware assembly by categorizing output as primary contigs or unmerged bubbles. Annotate repeat and unique contigs in the output.
- Enable parallel overlap store construction on large genomes
- Enable minimap as an option for generating overlaps during correction step. Corrected reads are generated as before with falcon_sense.
- Fix bug using shorter rather than longer reads for corrected reads/consensus computation
- Fix bug resuming without providing input sequences which would incorrectly set error rates
- Fix bug in bogart which would demote contained sequences as spurs incorrectly
- Fix bugs in falcon_sense which would hang when input had N bases and limit corrected reads to 65Kbp
- Fix falcon_sense support on OSX <10.10.
- Fix various pipeline bugs

Known Issues
-------------------

- Bogart (unitigger) has false positives in repeat breaking. Currently, the temporary workaround is to increase the minimum overlap size to avoid detecting false repeats caused by short overlaps. Canu will automatically do this for large (>100MB) genomes while the fixed algorithm is tested.
- LSF support has limited testing
- Large memory usage while unitig consensus calling on unitigs over 100MB in size (140Mb contig uses approximate 75GB).
- Distributed file systems (such as GPFS) causes issues with memory mapped files, slowing down parts of Canu, including meryl (0-mercounts) and falcon-sense (2-correction).
