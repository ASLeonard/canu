# -*- makefile -*-

# pathname conventions
#   We use absolute paths to commands when both of the following:
#-The command would not be found on a reasonable path like
# /usr/bin, /bin, or /usr/local/bin.
# e.g. paths to Knut's homedirectory, or even to /usr/local/ir/bin
# are being made explicit.
#-There is a reasonable amount of OS information available to make
# a good guess as to where things are.

# Perhaps there should be a config script which just checks for things
# and creates Make.compilers files custom for the platform.  However,
# we really have only a few platforms to port to, so this is not yet
# necessary.

# Dan Nathan and Ross had some discussion about this and we resolved that
# the OPERATING_SYSTEM variable would continue to be regarded as the
# platform determining variable.  If unset, the build should error out
# and give something informative to the user.  We recognize that
# OPERATING_SYSTEM is really a misnomer, as it indicates the platform
# (machine with its paths and other extras).  We might just as well use
# an ip address (or address family) for the platform.

VALID_OPERATING_SYSTEM:=$(strip \
    TRU64  \
    AIX    \
    cygwin \
    cygwin|mingw \
    cygwin|msvc \
    SunOS|foster-city   \
    SunOS|francisco's \
    FreeBSD \
    Panther \
    Linux|RH7 \
    Linux|RH9 \
    default|I-will-take-my-chances \
)

ifdef OPERATING_SYSTEM
  ifneq ($(filter ${OPERATING_SYSTEM},${VALID_OPERATING_SYSTEM}),)
    _OS|FULL_:=${OPERATING_SYSTEM}

    # Separate out the word before the "|" as the main OS identifier.
    # This is done by inserting a space before the "|", making 
    # A multiple-word string that gmake's filtering can work on.
    _OS_:=$(filter-out |%, $(subst |, |,${_OS|FULL_}))
  else
  $(error You are trying to use the build system on a platform where the \
environment variable OPERATING_SYSTEM is set to an unrecognized value.  \
You should either set \
OPERATING_SYSTEM to a recognized value, possibly after editing the \
Make.compilers file of the build system.  Currently, the recognized values \
for OPERATING_SYSTEM are: ${VALID_OPERATING_SYSTEM}  )
  endif
else
  $(error You are trying to use the build system on a platform where the \
environment variable OPERATING_SYSTEM is not set.  You should either set \
OPERATING_SYSTEM to a recognized value, possibly after editing the \
Make.compilers file of the build system.  Currently, the recognized values \
for OPERATING_SYSTEM are: ${VALID_OPERATING_SYSTEM}  )
endif


_CC_:=
ifdef WITH_GNU
  _CC_:=-gcc
endif

_OPT_:=
ifeq (${WITH_OPT},debug)
  _OPT_ :=-debug
endif
ifeq (${WITH_OPT},profile)
  _OPT_ :=-prof
endif

# old debug and profile options
ifdef WITH_DEBUG
  $(error WITH_DEBUG is obsolete.  Use WITH_OPT=debug instead.)
endif
ifdef WITH_PROFILE
  $(error WITH_PROFILE is obsolete.  Use WITH_OPT=debug instead.)
endif

_THR_:=
ifdef WITH_THREADS
  _THR_:=-threaded
endif

# installing stuff
# allow additional tag for install directories
ifdef INSTALL_TAG
  INSTALL/:=${MAKEFILE/}${_OS_}${_CC_}${_OPT_}${_THR_}-${INSTALL_TAG}/
else
  INSTALL/:=${MAKEFILE/}${_OS_}${_CC_}${_OPT_}${_THR_}/
endif

# some platforms put an extension on the executables/libs (like cygwin)
.EXE:=
.SO :=.so
.A  :=.a
.O  :=.o
ifeq (${_OS_},cygwin)
  .EXE:=.exe
  .SO :=.dll
endif
ifeq (${_OS|FULL_},cygwin|mingw)
  .EXE:=.exe
  .SO :=.dll
endif
ifeq (${_OS|FULL_},cygwin|msvc)
  .EXE:=.exe
  .SO :=.dll
  .A  :=.lib
  .O  :=.obj
endif

# C and CXX dependency programs/flags (don't change!  GNU is great!)
CCDEP		 :=gcc
CXXDEP		 :=g++
CDEPFLAGS        :=-MM -MG
CXXDEPFLAGS      :=-MM -MG

AR:=ar
ARFLAGS:=-crvs

## CC and CXX compilers and flags
-CC:=
-CXX:=
CC:=gcc
CXX:=g++
CFLAGS:=
CXXFLAGS:=
CFLAGS_COMPILE:=
CXXFLAGS_COMPILE:=
CLD=${CC}
CXXLD=${CXX}
CLDFLAGS:=
CXXLDFLAGS:=
CLIBS:=-lm
CXXLIBS:=-lm
SHLIB_FLAGS:=-shared
C_TMP_COMPILE:=
CXX_TMP_COMPILE:=

# Red Hat Linux 9 uses the current default values, but Red Hat 7
# needs gcc3/g++3 explicitly 
ifeq (${_OS|FULL_},Linux|RH7)
   CC:=gcc3
   CXX:=g++3
endif

# Change the CC and CXX to point to Microsoft's binaries. 
ifeq (${_OS|FULL_},cygwin|msvc)
   VCBASE:=c:/Program Files/Microsoft Visual Studio .NET 2003/Vc7
   CC:=${MAKEFILE/}Make_utils/msvc.pl -nologo -I\'${VCBASE}/include\' -I\'${VCBASE}/PlatformSDK/include\' -EHsc -Ox
   CFLAGS:=
   CXX:=${MAKEFILE/}Make_utils/msvc.pl -nologo -I\'${VCBASE}/include\' -I\'${VCBASE}/PlatformSDK/include\'  -EHsc -Ox
   CXXFLAGS:=
   AR:=${MAKEFILE/}Make_utils/msar.pl
   ARFLAGS:=-nologo
   CLD:=${MAKEFILE/}Make_utils/msld.pl
   CLDFLAGS:=-nologo -LIBPATH:\'${VCBASE}/lib\' -LIBPATH:\'${VCBASE}/PlatformSDK/lib\'
   CLIBS:=
   CXXLD:=${MAKEFILE/}Make_utils/msld.pl
   CXXLDFLAGS:=-nologo -LIBPATH:\'${VCBASE}/lib\' -LIBPATH:\'${VCBASE}/PlatformSDK/lib\' 
   CXXLIBS:=
endif

# Special cygwin|mingw compile flag to compile against the mingw library
# instead of the cygwin.dll (which has additional licensing restrictions)
ifeq (${_OS|FULL_},cygwin|mingw)
   MINGW_FLAG := -mno-cygwin
   CFLAGS_COMPILE += $(MINGW_FLAG)
   CXXFLAGS_COMPILE += $(MINGW_FLAG)
   CLDFLAGS += $(MINGW_FLAG)
   CXXLDFLAGS += $(MINGW_FLAG)
endif

# Linux compile-time flags (mainly large file support)
ifeq (${_OS_},Linux)
   LINUX_LARGE_FILE_SUPPORT := -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE
   CFLAGS_COMPILE += $(LINUX_LARGE_FILE_SUPPORT)
   CXXFLAGS_COMPILE += $(LINUX_LARGE_FILE_SUPPORT)
endif

ifeq (${_OS_}${_CC_},TRU64)
  CC               :=cc
  CXX              :=cxx
  CXXFLAGS_COMPILE    :=-std gnu
  CXX_TMP_COMPILE     :=so_locations cxx_repository
endif

ifeq (${_OS_}${_CC_},AIX)
  CC               :=xlc
  CXX              :=xlC
  SHLIB_FLAGS      :=-G
  AIX_RTTI_SUPPORT:=-qrtti
ifdef WITH_AIX32
  $(warning Large files support has been disabled)
  AIX_LARGE_FILE_SUPPORT               :=
else
  AIX_LARGE_FILE_SUPPORT               :=-q64 -qlonglong -D_LARGE_FILES
endif
  AIX_SUPPRESS_DUPLICATE_SYMBOL_WARNING:=-qstaticinline
  AIX_FLAG_TO_SUPPRESS_MANY_WARNINGS   :=-bhalt:8
  AIX_OPTIMIZATIONS                    :=-qarch=auto -qtune=auto -qcache=auto
  AIX_COMFORT_FLAGS                    :=-qlanglvl=ext -qignerrno -qupconv

  AIX_FLAGS  :=$(AIX_LARGE_FILE_SUPPORT) $(AIX_OPTIMIZATIONS)
  AIX_FLAGS  +=$(AIX_FLAG_TO_SUPPRESS_MANY_WARNINGS)
  AIX_FLAGS  +=$(AIX_SUPPRESS_DUPLICATE_SYMBOL_WARNING)
  AIX_FLAGS  +=$(AIX_COMFORT_FLAGS)

  CFLAGS_COMPILE     :=-qcpluscmt ${AIX_FLAGS}
  CXXFLAGS_COMPILE   :=${AIX_RTTI_SUPPORT} ${AIX_FLAGS}
  CLDFLAGS           :=${AIX_FLAGS}
  CXXLDFLAGS         :=${AIX_RTTI_SUPPORT} ${AIX_FLAGS}
endif

OPTFLAGS:=
OPTFLAGS_COMPILE:=
# optimize or not
ifeq (${_OPT_},-debug)
  OPTFLAGS_COMPILE         :=-Wall
  OPTFLAGS                 :=-g
endif
ifeq (${_OS_}${_CC_}${_OPT_},TRU64-debug)
  OPTFLAGS_COMPILE         :=
  OPTFLAGS                 :=-g
endif
ifeq (${_OS_}${_CC_}${_OPT_},AIX-debug)
  OPTFLAGS_COMPILE         :=
  OPTFLAGS := -g -qfullpath -qlinedebug
endif
ifeq (${_CC_}${_OPT_},-gcc-prof)
  OPTFLAGS_COMPILE         :=-Wall
  OPTFLAGS                 :=-pg -O4
endif

# to profile or not
ifeq (${_OPT_},-prof)
  OPTFLAGS_COMPILE         :=
  OPTFLAGS                 :=-pg
endif
ifeq (${_OS_}${_CC_}${_OPT_},TRU64-prof)
  OPTFLAGS                 :=-pg -fast
endif
ifeq (${_OS_}${_CC_}${_OPT_},AIX-prof)
  OPTFLAGS := -pg -qstrict -O3
endif

# regular flags
ifeq (${_OPT_},)
  OPTFLAGS_COMPILE         :=-Wall
  OPTFLAGS                 :=-g -O4
endif
ifeq (${_OS_}${_CC_}${_OPT_},TRU64)
  OPTFLAGS_COMPILE         :=
  OPTFLAGS                 :=-g3 -fast
endif
ifeq (${_OS_}${_CC_}${_OPT_},AIX)
  OPTFLAGS_COMPILE         :=
  OPTFLAGS :=-qstrict -O3
endif
ifeq (${_OS|FULL_},cygwin|msvc)
  OPTFLAGS_COMPILE := 
  OPTFLAGS         := 
endif

CFLAGS_COMPILE           +=$(OPTFLAGS_COMPILE) $(OPTFLAGS)
CXXFLAGS_COMPILE         +=$(OPTFLAGS_COMPILE) $(OPTFLAGS)
CLDFLAGS                 +=$(OPTFLAGS)
CXXLDFLAGS               +=$(OPTFLAGS)

# goofy AIX-ness for GCC
ifeq (${_OS_}${_CC_},AIX)
  CDEPFLAGS   +=-maix64
  CXXDEPFLAGS +=-maix64
endif
ifeq (${_OS_}${_CC_},AIX-gcc)
  CFLAGS           +=-maix64
  CXXFLAGS         +=-maix64
  CLDFLAGS         +=-Wl,-bbigtoc
  CXXLDFLAGS       +=-Wl,-bbigtoc
endif

ifeq (${_OS|FULL_},cygwin|msvc)
  CFLAGS           += 
  CXXFLAGS         += 
  CLDFLAGS         +=
  CXXLDFLAGS       +=
endif

# THREADS!!!
T_CFLAGS           :=-D_THREAD_SAFE
T_CXXFLAGS         :=-D_THREAD_SAFE
T_CFLAGS_COMPILE   :=-pthread
T_CXXFLAGS_COMPILE :=-pthread
T_CLDFLAGS         :=
T_CXXLDFLAGS       :=
T_CLIBS            :=-lpthread -lrt
T_CXXLIBS          :=-lpthread -lrt
ifeq (${_OS_}${_CC_}${_THR_},AIX-threaded)
# we do this by redefining our compilers
  CC               :=xlc_r
  CXX              :=xlC_r
  CDEPFLAGS        +=-D_THREAD_SAFE
  CXXDEPFLAGS      +=-D_THREAD_SAFE
  T_CFLAGS           :=
  T_CXXFLAGS         :=
  T_CFLAGS_COMPILE   :=
  T_CXXFLAGS_COMPILE :=
  T_CLDFLAGS         :=
  T_CXXLDFLAGS       :=
  T_CLIBS            :=
  T_CXXLIBS          :=
endif
ifeq (${_OS_},FreeBSD)
  T_CLDFLAGS   :=-pthread
  T_CXXLDFLAGS :=-pthread
  T_CLIBS            :=
  T_CXXLIBS          :=
endif
ifeq (${_OS_},cygwin)
  T_CFLAGS_COMPILE   :=
  T_CXXFLAGS_COMPILE :=
  T_CLIBS            :=-lpthread -lrpc
  T_CXXLIBS          :=-lpthread -lrpc
  # I added the Sun RPC library so that XDR will be available for UID terminator programs.
endif



## ammendments to the above because we are threaded
ifeq (${_THR_},-threaded)
  CFLAGS           +=${T_CFLAGS}
  CXXFLAGS         +=${T_CXXFLAGS}
  CFLAGS_COMPILE   +=${T_CFLAGS_COMPILE}
  CXXFLAGS_COMPILE +=${T_CXXFLAGS_COMPILE}
  CLDFLAGS         +=${T_CLDFLAGS}
  CXXLDFLAGS       +=${T_CXXLDFLAGS}
  CLIBS            +=${T_CLIBS}
  CXXLIBS          +=${T_CXXLIBS}
endif


## where is leda?
LEDA/ :=
LEDALIB/:=
ifeq (${_OS_},TRU64)
  LEDA/   :=/usr/local/ir/LEDA-4.3/
  ifeq (${_CC_},-gcc)
    LEDALIB/ :=${LEDA/}lib/eg++
  else
    LEDALIB/ :=${LEDA/}lib/cxx
  endif
  ifeq (${_OPT_},-debug)
    LEDALIB/ :=${LEDALIB/}-g/
  else
    LEDALIB/ :=${LEDALIB/}-O/
  endif
endif
ifeq (${_OS_},AIX)
  LEDA/   :=/scratch/edwardnj/LEDA-AIX
  ifeq (${_CC_},-gcc)
    LEDA/ :=${LEDA/}-GPP
  else
    LEDA/ :=${LEDA/}-XLC
  endif
  ifeq (${_OPT_},-debug)
    LEDA/ :=${LEDA/}/
  else
    LEDA/ :=${LEDA/}-OPT/
  endif
  LEDALIB/ :=${LEDA/}
endif

## where is python?
PYTHON    :=$(shell which python)
PYTHON_FLAGS :=
CFLAGS_PY    :=-I/usr/local/include/python
CLDFLAGS_PY  :=
CLDLIBS_PY   :=
ifeq (${_OS_}${_CC_},TRU64)
  CFLAGS_PY :=-I/usr/local/ir/Python-2.2.2 -I/usr/local/ir/Python-2.2.2/Include
  PYTHON    :=/usr/local/ir/bin/python
endif
ifeq (${_OS_}${_CC_},AIX)
  #CLDFLAGS_PY :=-Wl,-bI:/usr/local/src/Python/2.2.2/src/Python-2.2.2/Modules/python.exp
  #CFLAGS_PY :=-I/usr/local/include/python2.2
  #PYTHON    :=/usr/local/bin/python
  CLDFLAGS_PY :=-Wl,-bI:/usr/local/src/Python/2.3.3/src/Python-2.3.3/Modules/python.exp -bexpall
  CFLAGS_PY  :=-I/usr/local/src/Python/2.3.3/include/python2.3/
  PYTHON    :=/usr/local/src/Python/2.3.3/bin/python
endif
ifeq (${_OS_},cygwin)
  CFLAGS_PY :=-I/usr/include/python2.3
  CFLAGS_PY +=-DUSE_DL_IMPORT
  CLDFLAGS_PY  :=-Wl--enable-auto-image-base -L/usr/lib/python2.3/config
  CLIBS_PY     :=-lpython2.3
endif
CXXFLAGS_PY   :=${CFLAGS_PY}
CXXLDFLAGS_PY :=${CLDFLAGS_PY}
CXXLIBS_PY    :=${CLIBS_PY}

## where is perl?
PERL:=$(shell which perl)
PERL_FLAGS:=
ifeq (${_OS_},TRU64)
  PERL  :=/usr/local/bin/perl
endif
ifeq (${_OS_},AIX)
  PERL  :=/usr/local/bin/perl5.6.1
endif
ifeq (${PERL},)
  $(error Unable to find perl on this system.  I think your PATH sucks)
endif

## where is sh?
SH:=${SHELL}   # gmake should define where sh is
SH_FLAGS:=

## tex stuff
-LATEX :=
LATEX  :=latex
DVIPS  :=dvips
BIBTEX :=bibtex
PS2PDF :=ps2pdf
PDFLATEX := pdflatex
VIEWPS :=ghostview
PRINTPS:=lpr
ifeq (${_OS_},TRU64)
  REINERT_TETEX/ :=/work/assembly/reinert_home/teTeX/bin/
  LATEX  :=${REINERT_TETEX/}latex
  DVIPS  :=${REINERT_TETEX/}dvips -tletter
  BIBTEX :=${REINERT_TETEX/}bibtex
  PS2PDF :=/usr/local/ir/bin/ps2pdf
endif
# the SunOS machines in FC don't have good latex/ps/pdf support
ifeq (${_OS|FULL_},SunOS|foster-city)
  PS2PDF            :=/remote/depot/bin/ps2pdf -I/remote/depot/share/ghostscript/5.50/
endif
# francisco's machines don't have any latex so we will ignore the
# errors from latex type stuff by setting the -LATEX to -
ifeq (${_OS|FULL_},SunOS|francisco's)
  -LATEX :=-
endif
# neither does randy's mac
ifeq (${_OS|FULL_},Panther)
  -LATEX :=-
  FINK_BIN/ :=/sw/bin/
  LATEX :=${FINK_BIN/}latex
  DVIPS :=${FINK_BIN/}dvips
  BIBTEX:=${FINK_BIN/}latex
  PS2PDF:=${FINK_BIN/}ps2pdf
endif

## LAPACK
CXXFLAGS_LAPACK   :=-DFTN_UNDERSCORE -DFTN_LOWERCASE
CXXLDFLAGS_LAPACK :=-L/usr/local/lib
CXXLIBS_LAPACK    :=-llapack -lblas -lm
ifeq (${_OS_},TRU64)
# this seems to work for both gcc and non-gcc
  CXXLDFLAGS_LAPACK :=
  CXXLIBS_LAPACK    :=-ldxml
endif
ifeq (${_OS_},AIX)
  CXXFLAGS_LAPACK   :=-DFTN_LOWERCASE
  CXXLDFLAGS_LAPACK :=-L/usr/local/ir/lib
  CXXLIBS_LAPACK    :=-llapack -lessl -lxlf90
endif
# sometimes we deploy on Solaris with CDX
ifeq (${_OS|FULL_},SunOS|foster-city)
  CXXLDFLAGS_LAPACK :=-L/home/ross/local/lib
  CXXLIBS_LAPACK    :=-llapack -lblas -lF77
endif
# sometimes we deploy on Solaris on Fancisco's machines
ifeq (${_OS|FULL_},SunOS|francisco's)
  CXXLDFLAGS_LAPACK :=-L/home/lipperra/local/lib
  CXXLIBS_LAPACK    :=-llapack -lblas -lF77
endif
#Bjarni: someone just recently added these lines and screwed me over
#This voids the previous definitions above
#CXXFLAGS_LAPACK   :=${CFLAGS_LAPACK}
#CXXLDFLAGS_LAPACK :=${CLDFLAGS_LAPACK}
#CXXLIBS_LAPACK    :=${CLIBS_LAPACK}



# X11 stuff
CLDFLAGS_X11 :=-L/usr/X11R6/lib
CFLAGS_X11   :=-I/usr/X11R6/include

